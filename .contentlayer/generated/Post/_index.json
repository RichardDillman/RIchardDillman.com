[
  {
    "title": "Creating readable names",
    "date": "2021-01-14T00:00:00.000Z",
    "description": "I have seen a proliferation of easy meaningless words that look like documentation but explain very l...",
    "tags": [
      "beginners",
      "codequality",
      "javascript"
    ],
    "coverImage": "/images/blog/creating-readable-names.jpeg",
    "body": {
      "raw": "\n\nI have seen a proliferation of easy meaningless words that look like documentation but explain very little. Naming is one of our most challenging problems. The importance of meaningful names cannot be overstated and should not be an afterthought. Attention to naming increases code readability and trust. Well-named methods and variables are more likely to be reused, and creating reusable code is the purpose of creating shared libraries.\n\n## Combining words\n\n* **Camel**: (camelCase)\n* **Kebab**: (kebab-case)\n* **Pascal**: (PascalCase)\n* **Snake**: (snake_case)\n* **Screaming Snake**: (SCREAMING_SNAKE_CASE)\n\nEach language has its preferred cases for various things. Always follow the lining standards for your language. I use JavaScript and Python so here are those.\n\n### Javascript\n\n* **Camel**: variables, methods, and functions\n* **Pascal**: types, classes, and constructors\n* **Screaming Snake Case**: global immutable constants\n\n### Python\n\n* **Snake Case**: variables, methods, and functions\n* **Pascal**: types, classes, and constructors\n* **Screaming Snake Case**: global immutable constants\n\n## Meaningless words:\n\nNever use the following words. They add no meaning to the name and can always be replaced with a better, more specific term.\n\n* code\n* data\n* meta\n* mutate\n* parse\n* payload\n* transform\n* util\n\nConsider the difference between two methods called **getArticle** and **getArticleData**. As an outsider reading that API, if there is nothing else known about those methods, it would be very difficult to know which one to use in each situation. The word **data** is adding no information.\n\nOne could say that people should just read the documentation if they want to know the method details. **getArticleData** becomes tough to understand when nested within other functions.\n\nFor example:\n\n```JavaScript\nfunction getAuthors(id) {\n  const data = service.getArticleData(id);\n  const article = service.getArticle(id);\n  return article.getAuthors(data);\n}\n```\n\nAlthough we can see this method is supposed to get the authors of an article, the internal logic is difficult to read because it is unclear what the internal methods do. The word Data doesn't add enough meaning to warrant, adding it to the name.\n\nConsider the difference between the three methods __mutate__, __transform__, and __parse__. Having not read the implementation of those methods, you can not know the convention for what these words mean within the context of the project. It is challenging to see the purpose of those methods or the order in which they should be used.\n\nFor example:\n\n```JavaScript\nfunction getArticle(uri) {\n  return Article.fetch(uri)\n    .then(mutateAuthors)\n    .then(parseAuthors) // bug: authors should have been parsed before being mutated\n    .then(transform);\n}\n```\n\nAlthough it is evident that this method gets an article (of some unknown state and type), finding bugs with the ordering or functionality of this method is impossible without resorting to debugger statements or console logs. It is forcing the developer to run the code to understand the expected values between each step.\n\n## Obfuscation\n\nWhen the purpose of the function or variable name is to hide or limit understanding (i.e., black boxes, facades, moderators), then obviously this does not apply. The words referred to here as having low informational value may be useful in those cases where we're deliberately trying to hide.\n\nFor example:\n\n```JavaScript\nreturn getArticle()\n  .then(applyTransformations(options));\n```\n\nIn this case, we're deliberately hiding what the transformations are behind a layer of obfuscation or abstraction. There are many reasons this is valuable, including preserving the right to change the contents of the functionality in the future dramatically.\n\n## Acronyms, Initialism, Abbreviations, and Disemvoweling\n\nShortened words are a constant source of confusion. It is generally better to enter the full name and not the abbreviation, but there are cases where it would be redundant to do so, as in the case of well-known acronyms like AMP or HTML. In this case, stick to the camel case and only capitalize the first letter of the acronym, especially when the initialism is beginning.\n\n## Single Characters\n\nSingle-character names should be avoided, even within a loop where the temptation to use an “I” for the iterator.  Think of the group you are looping over. Doesn’t the following make a lot more sense?\n\n```Javascript\nfor (const dog in dogs) {\n  console.log(`${dog}: ${dogs[dog]}`);\n}\n```\n\n## Better Verbs:\n\n* **get**: Retrieve some state.\n* **set**: Change some state.\n* **reset**: Reset some state to its default value.\n* **add**: Add new content to some state.\n* **remove**: Delete some existing state.\n* **apply**: In-memory replacements\n* **compose**: Create a new dataset from existing information.\n* **fetch**:  Retrieve some state from an external data store.\n* **handle**: Deal with an action.  Often used in callbacks.\n* **is/has**: A pre-verb to denote a boolean.\n* **$**: A pre-verb to indicate a JQuery reference.\n\n## Duplication\n\nAny named item that is a child should not duplicate its parent name, nor should it repeat any synonym of that patents name. In the following example, we see breakpoints.  We know that breakpoints refer to widths, and as our project is mobile-first, we know they are all minimum widths.\n\n**BAD**\n```JavaScript\n$breakpoints = {\n  minWidthLg: “1440px”,\n  minWidthMd: “1200px”,\n  minWidthSm: “992px”,\n  minWidthXs: “768px”,\n  minWidthXxs: “500px”\n};\n```\n\n**GOOD**\n```JavaScript\n$breakpoints = {\n    xl: “1440px”,\n    lg: “1200px”,\n    md: “992px”,\n    sm: “768px”,\n    xs: “500px”\n};\n```\n\n## Classes\n\nClasses must be named with an appropriate proper singular noun in PascalCase, and tell us that this variable contains a type with properties and methods.\n\n```JavaScript\nclass Animal { }\nclass Dog extends Animal { }\nclass Dachshunds extends Dog { }\n```\n\n## Class Methods and properties\n\nClass methods and properties use the verb + noun convention, but the methods can get away with omitting the noun in some cases.  In this case, the noun is the parent class.  User.get() assumes you are getting the user User.name assumes a user name.\n\n```JavaScript\nDog.getName()\nDog.setColor()\nDog.wagTail()\n```\n\n## Numbers, Strings, and Objects\n\nName all Numbers, strings, and objects with the most appropriate singular noun.\n\n## Booleans\n\nThe names for booleans are in the form of a question, asking what it is or has or can be.  So our verbs are: is, has, can, or will.\n\n## Arrays\n\nName arrays with a plural noun, allowing us to address each child as a singular noun.  If need be, you can replace plural with a collection name birds becomes **flockOfBirds**.\n\n## Functions\n\nFunctions are always actions. So we start with a verb then add a noun. Verb + Noun results in a command for a thing. \n\n```JavaScript\ngetBirds();\ngoHome()\n```\n\nSome languages have their own rules around specific types of things (TypeScript prefers interfaces begin with a capital I). I am mostly interested in language-agnostic naming. Do you have any preferences around naming? Bring them up in the comments, and let’s discuss!\n",
      "code": "var Component=(()=>{var d=Object.create;var r=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,p=Object.prototype.hasOwnProperty;var f=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),b=(t,e)=>{for(var a in e)r(t,a,{get:e[a],enumerable:!0})},o=(t,e,a,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of u(e))!p.call(t,i)&&i!==a&&r(t,i,{get:()=>e[i],enumerable:!(s=g(e,i))||s.enumerable});return t};var w=(t,e,a)=>(a=t!=null?d(m(t)):{},o(e||!t||!t.__esModule?r(a,\"default\",{value:t,enumerable:!0}):a,t)),y=t=>o(r({},\"__esModule\",{value:!0}),t);var h=f((C,l)=>{l.exports=_jsx_runtime});var A={};b(A,{default:()=>k,frontmatter:()=>v});var n=w(h()),v={title:\"Creating readable names\",date:\"2021-01-14\",description:\"I have seen a proliferation of easy meaningless words that look like documentation but explain very l...\",tags:[\"beginners\",\"codequality\",\"javascript\"],coverImage:\"/images/blog/creating-readable-names.jpeg\"};function c(t){let e=Object.assign({p:\"p\",h2:\"h2\",ul:\"ul\",li:\"li\",strong:\"strong\",h3:\"h3\",pre:\"pre\",code:\"code\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:\"I have seen a proliferation of easy meaningless words that look like documentation but explain very little. Naming is one of our most challenging problems. The importance of meaningful names cannot be overstated and should not be an afterthought. Attention to naming increases code readability and trust. Well-named methods and variables are more likely to be reused, and creating reusable code is the purpose of creating shared libraries.\"}),`\n`,(0,n.jsx)(e.h2,{children:\"Combining words\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Camel\"}),\": (camelCase)\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Kebab\"}),\": (kebab-case)\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Pascal\"}),\": (PascalCase)\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Snake\"}),\": (snake_case)\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Screaming Snake\"}),\": (SCREAMING_SNAKE_CASE)\"]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"Each language has its preferred cases for various things. Always follow the lining standards for your language. I use JavaScript and Python so here are those.\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Javascript\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Camel\"}),\": variables, methods, and functions\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Pascal\"}),\": types, classes, and constructors\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Screaming Snake Case\"}),\": global immutable constants\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{children:\"Python\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Snake Case\"}),\": variables, methods, and functions\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Pascal\"}),\": types, classes, and constructors\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Screaming Snake Case\"}),\": global immutable constants\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Meaningless words:\"}),`\n`,(0,n.jsx)(e.p,{children:\"Never use the following words. They add no meaning to the name and can always be replaced with a better, more specific term.\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"code\"}),`\n`,(0,n.jsx)(e.li,{children:\"data\"}),`\n`,(0,n.jsx)(e.li,{children:\"meta\"}),`\n`,(0,n.jsx)(e.li,{children:\"mutate\"}),`\n`,(0,n.jsx)(e.li,{children:\"parse\"}),`\n`,(0,n.jsx)(e.li,{children:\"payload\"}),`\n`,(0,n.jsx)(e.li,{children:\"transform\"}),`\n`,(0,n.jsx)(e.li,{children:\"util\"}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Consider the difference between two methods called \",(0,n.jsx)(e.strong,{children:\"getArticle\"}),\" and \",(0,n.jsx)(e.strong,{children:\"getArticleData\"}),\". As an outsider reading that API, if there is nothing else known about those methods, it would be very difficult to know which one to use in each situation. The word \",(0,n.jsx)(e.strong,{children:\"data\"}),\" is adding no information.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"One could say that people should just read the documentation if they want to know the method details. \",(0,n.jsx)(e.strong,{children:\"getArticleData\"}),\" becomes tough to understand when nested within other functions.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"For example:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-JavaScript\",children:`function getAuthors(id) {\n  const data = service.getArticleData(id);\n  const article = service.getArticle(id);\n  return article.getAuthors(data);\n}\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"Although we can see this method is supposed to get the authors of an article, the internal logic is difficult to read because it is unclear what the internal methods do. The word Data doesn't add enough meaning to warrant, adding it to the name.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Consider the difference between the three methods \",(0,n.jsx)(e.strong,{children:\"mutate\"}),\", \",(0,n.jsx)(e.strong,{children:\"transform\"}),\", and \",(0,n.jsx)(e.strong,{children:\"parse\"}),\". Having not read the implementation of those methods, you can not know the convention for what these words mean within the context of the project. It is challenging to see the purpose of those methods or the order in which they should be used.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"For example:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-JavaScript\",children:`function getArticle(uri) {\n  return Article.fetch(uri)\n    .then(mutateAuthors)\n    .then(parseAuthors) // bug: authors should have been parsed before being mutated\n    .then(transform);\n}\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"Although it is evident that this method gets an article (of some unknown state and type), finding bugs with the ordering or functionality of this method is impossible without resorting to debugger statements or console logs. It is forcing the developer to run the code to understand the expected values between each step.\"}),`\n`,(0,n.jsx)(e.h2,{children:\"Obfuscation\"}),`\n`,(0,n.jsx)(e.p,{children:\"When the purpose of the function or variable name is to hide or limit understanding (i.e., black boxes, facades, moderators), then obviously this does not apply. The words referred to here as having low informational value may be useful in those cases where we're deliberately trying to hide.\"}),`\n`,(0,n.jsx)(e.p,{children:\"For example:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-JavaScript\",children:`return getArticle()\n  .then(applyTransformations(options));\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"In this case, we're deliberately hiding what the transformations are behind a layer of obfuscation or abstraction. There are many reasons this is valuable, including preserving the right to change the contents of the functionality in the future dramatically.\"}),`\n`,(0,n.jsx)(e.h2,{children:\"Acronyms, Initialism, Abbreviations, and Disemvoweling\"}),`\n`,(0,n.jsx)(e.p,{children:\"Shortened words are a constant source of confusion. It is generally better to enter the full name and not the abbreviation, but there are cases where it would be redundant to do so, as in the case of well-known acronyms like AMP or HTML. In this case, stick to the camel case and only capitalize the first letter of the acronym, especially when the initialism is beginning.\"}),`\n`,(0,n.jsx)(e.h2,{children:\"Single Characters\"}),`\n`,(0,n.jsx)(e.p,{children:\"Single-character names should be avoided, even within a loop where the temptation to use an \\u201CI\\u201D for the iterator.  Think of the group you are looping over. Doesn\\u2019t the following make a lot more sense?\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-Javascript\",children:\"for (const dog in dogs) {\\n  console.log(`${dog}: ${dogs[dog]}`);\\n}\\n\"})}),`\n`,(0,n.jsx)(e.h2,{children:\"Better Verbs:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"get\"}),\": Retrieve some state.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"set\"}),\": Change some state.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"reset\"}),\": Reset some state to its default value.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"add\"}),\": Add new content to some state.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"remove\"}),\": Delete some existing state.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"apply\"}),\": In-memory replacements\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"compose\"}),\": Create a new dataset from existing information.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"fetch\"}),\":  Retrieve some state from an external data store.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"handle\"}),\": Deal with an action.  Often used in callbacks.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"is/has\"}),\": A pre-verb to denote a boolean.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"$\"}),\": A pre-verb to indicate a JQuery reference.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Duplication\"}),`\n`,(0,n.jsx)(e.p,{children:\"Any named item that is a child should not duplicate its parent name, nor should it repeat any synonym of that patents name. In the following example, we see breakpoints.  We know that breakpoints refer to widths, and as our project is mobile-first, we know they are all minimum widths.\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.strong,{children:\"BAD\"})}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-JavaScript\",children:`$breakpoints = {\n  minWidthLg: \\u201C1440px\\u201D,\n  minWidthMd: \\u201C1200px\\u201D,\n  minWidthSm: \\u201C992px\\u201D,\n  minWidthXs: \\u201C768px\\u201D,\n  minWidthXxs: \\u201C500px\\u201D\n};\n`})}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.strong,{children:\"GOOD\"})}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-JavaScript\",children:`$breakpoints = {\n    xl: \\u201C1440px\\u201D,\n    lg: \\u201C1200px\\u201D,\n    md: \\u201C992px\\u201D,\n    sm: \\u201C768px\\u201D,\n    xs: \\u201C500px\\u201D\n};\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Classes\"}),`\n`,(0,n.jsx)(e.p,{children:\"Classes must be named with an appropriate proper singular noun in PascalCase, and tell us that this variable contains a type with properties and methods.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-JavaScript\",children:`class Animal { }\nclass Dog extends Animal { }\nclass Dachshunds extends Dog { }\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Class Methods and properties\"}),`\n`,(0,n.jsx)(e.p,{children:\"Class methods and properties use the verb + noun convention, but the methods can get away with omitting the noun in some cases.  In this case, the noun is the parent class.  User.get() assumes you are getting the user User.name assumes a user name.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-JavaScript\",children:`Dog.getName()\nDog.setColor()\nDog.wagTail()\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Numbers, Strings, and Objects\"}),`\n`,(0,n.jsx)(e.p,{children:\"Name all Numbers, strings, and objects with the most appropriate singular noun.\"}),`\n`,(0,n.jsx)(e.h2,{children:\"Booleans\"}),`\n`,(0,n.jsx)(e.p,{children:\"The names for booleans are in the form of a question, asking what it is or has or can be.  So our verbs are: is, has, can, or will.\"}),`\n`,(0,n.jsx)(e.h2,{children:\"Arrays\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Name arrays with a plural noun, allowing us to address each child as a singular noun.  If need be, you can replace plural with a collection name birds becomes \",(0,n.jsx)(e.strong,{children:\"flockOfBirds\"}),\".\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Functions\"}),`\n`,(0,n.jsx)(e.p,{children:\"Functions are always actions. So we start with a verb then add a noun. Verb + Noun results in a command for a thing.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-JavaScript\",children:`getBirds();\ngoHome()\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"Some languages have their own rules around specific types of things (TypeScript prefers interfaces begin with a capital I). I am mostly interested in language-agnostic naming. Do you have any preferences around naming? Bring them up in the comments, and let\\u2019s discuss!\"})]})}function x(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(c,t)})):c(t)}var k=x;return y(A);})();\n;return Component;"
    },
    "_id": "posts/creating-readable-names.mdx",
    "_raw": {
      "sourceFilePath": "posts/creating-readable-names.mdx",
      "sourceFileName": "creating-readable-names.mdx",
      "sourceFileDir": "posts",
      "contentType": "mdx",
      "flattenedPath": "posts/creating-readable-names"
    },
    "type": "Post",
    "slug": "creating-readable-names"
  },
  {
    "title": "Head tags organized",
    "date": "2021-01-14T00:00:00.000Z",
    "description": "Order (still) matters  A minimal number of tags are allowed within the HEAD of HTML documents. Those...",
    "tags": [
      "html",
      "performance",
      "javascript",
      "css"
    ],
    "coverImage": "/images/blog/head-tags-organized.jpeg",
    "body": {
      "raw": "\nOrder (still) matters\n\nA minimal number of tags are allowed within the HEAD of HTML documents. Those tags are title, style, base, link, meta, script, and noscript. Oddly enough, these elements’ order can drastically alter the loading of your document and its dependencies. Here are some things I have discovered trying to scratch out better performance within the sites I work on.\n\n## 1: Character Encodings\n\nThe meta tag for the charset declaration should fit entirely within the first 1024 bytes of the file. If the charset is included later in the code, the HTML will be re-parsed once encountered, wasting precious time before rendering anything. So always put it first. The same reasoning applies to the viewport and other meta tags that describe how a page should render.\n\n```HTML\n<meta charset=\"UTF-8\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n```\n\n## 2: Title Tag\n\nThe title tag’s purpose is to declare the name of the document. It will replace the URL within the browser's tab, so it is good to place it as early as possible to avoid confusion if the user notices when the tab name updates.\n\n```HTML\n<title>Page Title</title>\n```\n\n## 3: Preconnected Links\n\nHere we are focused on third-party domains that we know for sure will be requested. Preconnect will handle the DNS lookup, navigate the connection, and any redirects necessary to reach the targets. It will not download any content. Requesting these connections is particularly helpful on slow connections to establish the route as early as possible. However, this can be costly for mobile devices as multiple connections can consume unnecessary bandwidth.  Only preconnect to servers you are certain will be needed, such as analytics, your CDN, or your static asset site.\n\n```HTML\n<link rel=\"preconnect\" href=\"https://www.google-analytics.com\" />\n```\n\n## 4: Synchronous Scripts\n\nSynchronous scripts include any JavaScript that must run before the page renders, such as populating the dataLayer. Here we include script blocks and external scripts but not deferred or async ones. No matter where it is, any script in the head will block applying CSS, even after the CSS. The browser must process anything that might modify the DOM before processing your styles.  So you should add those synchronous scripts before your style sheet.\n\n```HTML\n<script>...</script>\n<script src=\"app.js\"></script>\n```\n\n## 5: Synchronous CSS\n\nThis includes inline style blocks and style sheets that are used for rendering. Consider using media queries and breaking your styles into multiple files. The media attribute will let the browser know if this CSS is going to be render-blocking or not.\n\nInline styles are parsed first. It is important that we remember that styles are parsed as they are encountered.\n\n```HTML\n<style>...</style>\n```\n\nExternal files are requested and parsed next.\n\n```HTML\n<link href=\"style.css\" rel=\"stylesheet\">\n```\n\nNext to be requested and parsed are the styles with media queries. If they match your current breakpoint, orientation, or pixel density.\n\n```HTML\n<link href=\"other.css\" rel=\"stylesheet\" media=\"(min-width:768px)\">\n```\n\nNext up for request and parsing are the print style sheets.\n\n```HTML\n<link href=\"print.css\" rel=\"stylesheet\" media=\"print\">\n```\n\nStylesheets with media queries that do not match the current environment will not be requested.\n\n```HTML\n<link href=\"other.css\" rel=\"stylesheet\" media=\"(min-width:1024px)\">\n```\n\nKnowing this, you can also trick the browser into loading non-critical CSS a bit later with the onLoad method. By pretending this is a print sheet, it will load after all other CSS but before any containing media queries. Once its load event fires, the media changes to all. With this being async, that will happen after the DOM has been parsed and images begin loading.\n\n```HTML\n<link rel=\"stylesheet\" href=\"lazy.css\" media=\"print\" onload=\"this.media='all'\">\n```\n\n## 6: Preloaded Links\n\nWe should preload as few files as possible. These should be visual elements that are required for above the fold rendering. This includes items like fonts, hero images, or icons.  As for fonts, you most likely only need the woff2 version. Also, consider loading the fonts from your own server.\n\n```HTML\n<link rel=\"preload\" as=\"font\" href=\"font.woff2\" type=\"font/woff2\" />\n```\n\n## 7: Asynchronous or deferred Scripts\n\nAll other scripts[?] requested, such as those that add interaction handlers, go here. We should put these at the bottom of the body to allow for quicker parsing of the DOM. But if you must put them in the head due to CMS or framework restrictions, place them here, and set them to either async or defer depending on your need.\n\n```HTML\n<script src=\"foo.js\" async></script>\n<script src=\"bar.js\" defer></script>\n```\n\n## 8: Prefetched Links\n\nThese are assets that you know for sure you will need later within this page's render cycle. This includes things that you want in place before they are needed. This could include logos in the footer, Twitter feeds, or videos.\n\n```HTML\n<link rel=\"prefetch\" href=\"jwpplayer.js\" />\n```\n\n## 9: Prerendered Links\n\nEntire content pages that you are reasonably certain that your user will visit next. You can download the assets for that page before it is even requested. I would render things like login, search, cart, or the next page in a series.\n\n```HTML\n<link rel=\"prerender\" href=\"/search/\" />\n```\n\n## 10: Non-rendering assets\n\nThis includes meta tags and scripts that do not affect rendering in any way, such as OpenGraph, manifests, structured data. These tags are for bots and sharing in social media but are not necessary to render the page. To include a script in this spot it must be inline as this content will be inspected in the first pass through the document.\n\n```HTML\n<link rel=\"shortcut icon\" href=\"icon.png\" />\n<link rel=\"apple-touch-icon-precomposed\" href=\"icon.png\" />\n<meta name=\"apple-mobile-web-app-title\" content=\"Company Name\" />\n<link rel=\"canonical\" href=\"https://companyname.com\" />\n<meta name=\"twitter:card\" content=\"summary\">\n<meta name=\"twitter:image\" content=\"icon.png\">\n<meta name=\"twitter:description\" content=\"\">\n<script type=\"application/ld+json\">\n{\n  \"@context\": \"https://json-ld.org/contexts/person.jsonld\",\n  \"@id\": \"http://dbpedia.org/resource/John_Lennon\",\n  \"name\": \"John Lennon\",\n  \"born\": \"1940-10-09\",\n  \"spouse\": \"http://dbpedia.org/resource/Cynthia_Lennon\"\n}\n</script>\n```\n\nThose are the most common tags that could be in your head. Do you wonder about any not listed here? Bring them up in the comments, and let’s discuss!\n",
      "code": "var Component=(()=>{var d=Object.create;var i=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var y=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),f=(t,e)=>{for(var r in e)i(t,r,{get:e[r],enumerable:!0})},o=(t,e,r,a)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let s of u(e))!g.call(t,s)&&s!==r&&i(t,s,{get:()=>e[s],enumerable:!(a=p(e,s))||a.enumerable});return t};var w=(t,e,r)=>(r=t!=null?d(m(t)):{},o(e||!t||!t.__esModule?i(r,\"default\",{value:t,enumerable:!0}):r,t)),b=t=>o(i({},\"__esModule\",{value:!0}),t);var c=y((v,l)=>{l.exports=_jsx_runtime});var H={};f(H,{default:()=>L,frontmatter:()=>T});var n=w(c()),T={title:\"Head tags organized\",date:\"2021-01-14\",description:\"Order (still) matters  A minimal number of tags are allowed within the HEAD of HTML documents. Those...\",tags:[\"html\",\"performance\",\"javascript\",\"css\"],coverImage:\"/images/blog/head-tags-organized.jpeg\"};function h(t){let e=Object.assign({p:\"p\",h2:\"h2\",pre:\"pre\",code:\"code\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:\"Order (still) matters\"}),`\n`,(0,n.jsx)(e.p,{children:\"A minimal number of tags are allowed within the HEAD of HTML documents. Those tags are title, style, base, link, meta, script, and noscript. Oddly enough, these elements\\u2019 order can drastically alter the loading of your document and its dependencies. Here are some things I have discovered trying to scratch out better performance within the sites I work on.\"}),`\n`,(0,n.jsx)(e.h2,{children:\"1: Character Encodings\"}),`\n`,(0,n.jsx)(e.p,{children:\"The meta tag for the charset declaration should fit entirely within the first 1024 bytes of the file. If the charset is included later in the code, the HTML will be re-parsed once encountered, wasting precious time before rendering anything. So always put it first. The same reasoning applies to the viewport and other meta tags that describe how a page should render.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-HTML\",children:`<meta charset=\"UTF-8\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"2: Title Tag\"}),`\n`,(0,n.jsx)(e.p,{children:\"The title tag\\u2019s purpose is to declare the name of the document. It will replace the URL within the browser's tab, so it is good to place it as early as possible to avoid confusion if the user notices when the tab name updates.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-HTML\",children:`<title>Page Title</title>\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"3: Preconnected Links\"}),`\n`,(0,n.jsx)(e.p,{children:\"Here we are focused on third-party domains that we know for sure will be requested. Preconnect will handle the DNS lookup, navigate the connection, and any redirects necessary to reach the targets. It will not download any content. Requesting these connections is particularly helpful on slow connections to establish the route as early as possible. However, this can be costly for mobile devices as multiple connections can consume unnecessary bandwidth.  Only preconnect to servers you are certain will be needed, such as analytics, your CDN, or your static asset site.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-HTML\",children:`<link rel=\"preconnect\" href=\"https://www.google-analytics.com\" />\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"4: Synchronous Scripts\"}),`\n`,(0,n.jsx)(e.p,{children:\"Synchronous scripts include any JavaScript that must run before the page renders, such as populating the dataLayer. Here we include script blocks and external scripts but not deferred or async ones. No matter where it is, any script in the head will block applying CSS, even after the CSS. The browser must process anything that might modify the DOM before processing your styles.  So you should add those synchronous scripts before your style sheet.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-HTML\",children:`<script>...<\\/script>\n<script src=\"app.js\"><\\/script>\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"5: Synchronous CSS\"}),`\n`,(0,n.jsx)(e.p,{children:\"This includes inline style blocks and style sheets that are used for rendering. Consider using media queries and breaking your styles into multiple files. The media attribute will let the browser know if this CSS is going to be render-blocking or not.\"}),`\n`,(0,n.jsx)(e.p,{children:\"Inline styles are parsed first. It is important that we remember that styles are parsed as they are encountered.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-HTML\",children:`<style>...</style>\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"External files are requested and parsed next.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-HTML\",children:`<link href=\"style.css\" rel=\"stylesheet\">\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"Next to be requested and parsed are the styles with media queries. If they match your current breakpoint, orientation, or pixel density.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-HTML\",children:`<link href=\"other.css\" rel=\"stylesheet\" media=\"(min-width:768px)\">\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"Next up for request and parsing are the print style sheets.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-HTML\",children:`<link href=\"print.css\" rel=\"stylesheet\" media=\"print\">\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"Stylesheets with media queries that do not match the current environment will not be requested.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-HTML\",children:`<link href=\"other.css\" rel=\"stylesheet\" media=\"(min-width:1024px)\">\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"Knowing this, you can also trick the browser into loading non-critical CSS a bit later with the onLoad method. By pretending this is a print sheet, it will load after all other CSS but before any containing media queries. Once its load event fires, the media changes to all. With this being async, that will happen after the DOM has been parsed and images begin loading.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-HTML\",children:`<link rel=\"stylesheet\" href=\"lazy.css\" media=\"print\" onload=\"this.media='all'\">\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"6: Preloaded Links\"}),`\n`,(0,n.jsx)(e.p,{children:\"We should preload as few files as possible. These should be visual elements that are required for above the fold rendering. This includes items like fonts, hero images, or icons.  As for fonts, you most likely only need the woff2 version. Also, consider loading the fonts from your own server.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-HTML\",children:`<link rel=\"preload\" as=\"font\" href=\"font.woff2\" type=\"font/woff2\" />\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"7: Asynchronous or deferred Scripts\"}),`\n`,(0,n.jsx)(e.p,{children:\"All other scripts[?] requested, such as those that add interaction handlers, go here. We should put these at the bottom of the body to allow for quicker parsing of the DOM. But if you must put them in the head due to CMS or framework restrictions, place them here, and set them to either async or defer depending on your need.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-HTML\",children:`<script src=\"foo.js\" async><\\/script>\n<script src=\"bar.js\" defer><\\/script>\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"8: Prefetched Links\"}),`\n`,(0,n.jsx)(e.p,{children:\"These are assets that you know for sure you will need later within this page's render cycle. This includes things that you want in place before they are needed. This could include logos in the footer, Twitter feeds, or videos.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-HTML\",children:`<link rel=\"prefetch\" href=\"jwpplayer.js\" />\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"9: Prerendered Links\"}),`\n`,(0,n.jsx)(e.p,{children:\"Entire content pages that you are reasonably certain that your user will visit next. You can download the assets for that page before it is even requested. I would render things like login, search, cart, or the next page in a series.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-HTML\",children:`<link rel=\"prerender\" href=\"/search/\" />\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"10: Non-rendering assets\"}),`\n`,(0,n.jsx)(e.p,{children:\"This includes meta tags and scripts that do not affect rendering in any way, such as OpenGraph, manifests, structured data. These tags are for bots and sharing in social media but are not necessary to render the page. To include a script in this spot it must be inline as this content will be inspected in the first pass through the document.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-HTML\",children:`<link rel=\"shortcut icon\" href=\"icon.png\" />\n<link rel=\"apple-touch-icon-precomposed\" href=\"icon.png\" />\n<meta name=\"apple-mobile-web-app-title\" content=\"Company Name\" />\n<link rel=\"canonical\" href=\"https://companyname.com\" />\n<meta name=\"twitter:card\" content=\"summary\">\n<meta name=\"twitter:image\" content=\"icon.png\">\n<meta name=\"twitter:description\" content=\"\">\n<script type=\"application/ld+json\">\n{\n  \"@context\": \"https://json-ld.org/contexts/person.jsonld\",\n  \"@id\": \"http://dbpedia.org/resource/John_Lennon\",\n  \"name\": \"John Lennon\",\n  \"born\": \"1940-10-09\",\n  \"spouse\": \"http://dbpedia.org/resource/Cynthia_Lennon\"\n}\n<\\/script>\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"Those are the most common tags that could be in your head. Do you wonder about any not listed here? Bring them up in the comments, and let\\u2019s discuss!\"})]})}function k(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(h,t)})):h(t)}var L=k;return b(H);})();\n;return Component;"
    },
    "_id": "posts/head-tags-organized.mdx",
    "_raw": {
      "sourceFilePath": "posts/head-tags-organized.mdx",
      "sourceFileName": "head-tags-organized.mdx",
      "sourceFileDir": "posts",
      "contentType": "mdx",
      "flattenedPath": "posts/head-tags-organized"
    },
    "type": "Post",
    "slug": "head-tags-organized"
  },
  {
    "title": "Hero Image Optimization Techniques",
    "date": "2023-01-17T00:00:00.000Z",
    "description": "Page speed is essential in determining a website's user experience. If a user can't experience the...",
    "tags": [
      "pagespeed",
      "programming",
      "tutorial",
      "responsive"
    ],
    "coverImage": "/images/blog/hero-image-optimization-techniques.webp",
    "body": {
      "raw": "\nPage speed is essential in determining a website's user experience. If a user can’t experience the content, they’ll bounce. A site's ideal complete load time is below 2 seconds. Studies show that most users will abandon the page within 3 seconds. You can also expect a 1.3% increase in that abandonment for every additional 100ms. For this reason, Google rates page speed quite heavily for SEO, and Google's Search Console provides a report on LCP, which can help website owners understand and improve the loading performance of their pages.\n\nReasons why page speed needs to be a key KPI:\n\n- you want your page to rank well in organic searches\n- you want your ads to perform\n- you don’t want users abandoning your page out of frustration\n\nFortunately, a lot of low-hanging fruit can make a big difference in getting started. Following are some issues that I see a lot and have pretty straightforward ways to address.\n\n## Measuring page speed\n\nOne of the key metrics used to measure page speed is the [Largest Contentful Paint (LCP)](https://web.dev/lcp/). The LCP measures the time it takes for the largest content element visible in the viewport to load and render. Therefore, optimizing the hero image can improve LCP and web page speed. Your goal is to have LCP occur as quickly as possible. Google has defined this as [within 2.5 seconds](https://support.google.com/webmasters/answer/9205520?hl=en#status_bucket) or faster measured from the start of page load.\n\nWe should always strive to set the hero image src in the initial HTML payload to reduce the length of the critical request chain. Some frameworks will add the src via Javascript or CSS. However, this will always take additional time.\n\n\n## The file size\nOne way to speed up the hero image is to reduce its file size through compression. You could also use a tool like [ImageOptim](https://imageoptim.com/), or [NextJS’s Image Component](https://nextjs.org/docs/api-reference/next/image). Additionally, a next-gen image format like [WebP](https://web.dev/serve-images-webp/), available for all modern browsers, can significantly reduce the file size without sacrificing quality.\n\n## A content delivery network\nAnother way to improve the LCP is to use a Content Delivery Network (CDN) to serve the hero image. A CDN is a network of servers distributed around the world. It can significantly reduce the time it takes for file delivery by serving it from a geographically closer server.\n\n## Specify native height and width\nImages should always have both height and width tags to allow the browser to calculate the aspect ratio. These should be the native size of the image while allowing CSS to set the actual rendered size. Adding the height and width allows the browser to hold this space open for the image; therefore, the page will not shift when it loads, allowing the measurement to take place more quickly.\n\n_Example of using the height and width:_\n```html\n<img\n    src=\"hero-image.jpg\"\n    height=”400”\n    width=”400”\n    alt=\"Hero Image.\"\n/>\n```\n\n## The srcset and sizes attributes\nA more responsive image optimization is to use the srcset and sizes attributes. These attributes allow you to provide different versions of an image for different screen sizes and resolutions and can significantly reduce the amount of data on smaller devices or lower-resolution screens.\n\n_Example of using the srcset and sizes:_\n```html\n<img\n    src=\"hero-image.jpg\"\n    height=”400”\n    width=”400”\n    srcset=\"\n        hero_400px.jpg 400w,\n        hero_800px.jpg 800w,\n        hero_1600px.jpg 1600w\n    \" \n    sizes=\"(max-width: 600px) 100vw, 50vw\" \n    alt=\"Hero Image.\"\n/>\n```\n\n## The loading attribute\nThe loading attribute can prevent or encourage the browser’s loading order. The loading attribute can be set to lazy or eager, depending on the use case. “Lazy” loads the image when it becomes visible in the viewport, while eager loads the image immediately when the page is loaded, whether or not it’s in the viewport.\n\n_Example of using the loading attribute:_\n```html\n<img\n    src=\"hero-image.jpg\"\n    height=”400”\n    width=”400”\n    loading=\"eager\"\n    alt=\"Hero Image.\"\n/>\n```\nYou can add the loading attribute with a value of “lazy” to other images on your page when they should not load early. Slowing these items down helps speed up the rest of the assets. Lazy images are requested immediately if they are within the viewport. Outside the viewport, they are delayed and only fetched when approaching it.\n\n## The link tag with preload\nA link tag with the preload attribute tells the browser about critical resources before encountering them in HTML. So, for example, you can use preload to increase the download priority of late-discovered Hero images, especially if they load via Javascript or CSS.\n\n_Example of using the link tag:_\n```html\n<link rel=\"preload\" as=\"image\" href=\"hero-image.jpg\" />\n```\n\nIf you are already using the srcset in your hero’s image tag, you can also use that here in the link tag and ensure that the correct size image is selected.\n\n_Example of using the link tag with a responsive image:_\n```html\n<link\n    rel=\"preload\"\n    as=\"image\"\n    href=\"hero-image.jpg\"\n    imagesrcset=\"\n        hero_400px.jpg 400w,\n        hero_800px.jpg 800w,\n        hero_1600px.jpg 1600w\n    \" \n    imagesizes=\"(max-width: 600px) 100vw, 50vw\"\n/>\n```\n\n## The fetchpriority attribute\nYou can use a fetchpriority attribute to do the same thing as a link preload, although you will have to wait for the processor to discover the image tag. A priority hint can adjust the loading order of assets such as images, CSS, iframes, scripts, and fonts. So the Hero can be requested before other lower-priority assets. \n\n_Example of using the fetchpriority attribute:_\n```html\n<img\n    src=\"hero-image.jpg\"\n    height=”400”\n    width=”400”\n    fetchpriority=\"high\"\n    alt=\"Hero Image.\"\n/>\n```\n\n## Putting it all together\nUsing all the resources we have learned, we can apply them all to receive an optimal loading path.\n\n_Example of using all the tools:_\n```html\n<head>\n    <link\n        rel=\"preload\"\n        as=\"image\"\n        href=\"hero-image.jpg\"\n        imagesrcset=\"\n            hero_400px.jpg 400w,\n            hero_800px.jpg 800w,\n            hero_1600px.jpg 1600w\n        \" \n        imagesizes=\"(max-width: 600px) 100vw, 50vw\"\n    />\n</head>\n<body>\n    <img\n        src=\"hero-image.jpg\"\n        height=”400”\n        width=”400”\n        srcset=\"\n            hero_400px.jpg 400w,\n            hero_800px.jpg 800w,\n            hero_1600px.jpg 1600w\n        \" \n        sizes=\"(max-width: 600px) 100vw, 50vw\" \n        alt=\"Hero Image.\"\n        loading=\"eager\"\n        fetchpriority=\"high\"\n    />\n</body>\n\n```\n\nOptimizing the hero image is essential in improving the LCP and web page speed. Applying the above techniques can get your site dramatically closer to that 2.5 seconds goal!\n\n",
      "code": "var Component=(()=>{var c=Object.create;var r=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,u=Object.prototype.hasOwnProperty;var w=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),f=(n,e)=>{for(var i in e)r(n,i,{get:e[i],enumerable:!0})},s=(n,e,i,o)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of p(e))!u.call(n,a)&&a!==i&&r(n,a,{get:()=>e[a],enumerable:!(o=g(e,a))||o.enumerable});return n};var y=(n,e,i)=>(i=n!=null?c(m(n)):{},s(e||!n||!n.__esModule?r(i,\"default\",{value:n,enumerable:!0}):i,n)),v=n=>s(r({},\"__esModule\",{value:!0}),n);var l=w((_,h)=>{h.exports=_jsx_runtime});var k={};f(k,{default:()=>j,frontmatter:()=>b});var t=y(l()),b={title:\"Hero Image Optimization Techniques\",date:\"2023-01-17\",description:\"Page speed is essential in determining a website's user experience. If a user can't experience the...\",tags:[\"pagespeed\",\"programming\",\"tutorial\",\"responsive\"],coverImage:\"/images/blog/hero-image-optimization-techniques.webp\"};function d(n){let e=Object.assign({p:\"p\",ul:\"ul\",li:\"li\",h2:\"h2\",a:\"a\",em:\"em\",pre:\"pre\",code:\"code\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.p,{children:\"Page speed is essential in determining a website's user experience. If a user can\\u2019t experience the content, they\\u2019ll bounce. A site's ideal complete load time is below 2 seconds. Studies show that most users will abandon the page within 3 seconds. You can also expect a 1.3% increase in that abandonment for every additional 100ms. For this reason, Google rates page speed quite heavily for SEO, and Google's Search Console provides a report on LCP, which can help website owners understand and improve the loading performance of their pages.\"}),`\n`,(0,t.jsx)(e.p,{children:\"Reasons why page speed needs to be a key KPI:\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:\"you want your page to rank well in organic searches\"}),`\n`,(0,t.jsx)(e.li,{children:\"you want your ads to perform\"}),`\n`,(0,t.jsx)(e.li,{children:\"you don\\u2019t want users abandoning your page out of frustration\"}),`\n`]}),`\n`,(0,t.jsx)(e.p,{children:\"Fortunately, a lot of low-hanging fruit can make a big difference in getting started. Following are some issues that I see a lot and have pretty straightforward ways to address.\"}),`\n`,(0,t.jsx)(e.h2,{children:\"Measuring page speed\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"One of the key metrics used to measure page speed is the \",(0,t.jsx)(e.a,{href:\"https://web.dev/lcp/\",children:\"Largest Contentful Paint (LCP)\"}),\". The LCP measures the time it takes for the largest content element visible in the viewport to load and render. Therefore, optimizing the hero image can improve LCP and web page speed. Your goal is to have LCP occur as quickly as possible. Google has defined this as \",(0,t.jsx)(e.a,{href:\"https://support.google.com/webmasters/answer/9205520?hl=en#status_bucket\",children:\"within 2.5 seconds\"}),\" or faster measured from the start of page load.\"]}),`\n`,(0,t.jsx)(e.p,{children:\"We should always strive to set the hero image src in the initial HTML payload to reduce the length of the critical request chain. Some frameworks will add the src via Javascript or CSS. However, this will always take additional time.\"}),`\n`,(0,t.jsx)(e.h2,{children:\"The file size\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"One way to speed up the hero image is to reduce its file size through compression. You could also use a tool like \",(0,t.jsx)(e.a,{href:\"https://imageoptim.com/\",children:\"ImageOptim\"}),\", or \",(0,t.jsx)(e.a,{href:\"https://nextjs.org/docs/api-reference/next/image\",children:\"NextJS\\u2019s Image Component\"}),\". Additionally, a next-gen image format like \",(0,t.jsx)(e.a,{href:\"https://web.dev/serve-images-webp/\",children:\"WebP\"}),\", available for all modern browsers, can significantly reduce the file size without sacrificing quality.\"]}),`\n`,(0,t.jsx)(e.h2,{children:\"A content delivery network\"}),`\n`,(0,t.jsx)(e.p,{children:\"Another way to improve the LCP is to use a Content Delivery Network (CDN) to serve the hero image. A CDN is a network of servers distributed around the world. It can significantly reduce the time it takes for file delivery by serving it from a geographically closer server.\"}),`\n`,(0,t.jsx)(e.h2,{children:\"Specify native height and width\"}),`\n`,(0,t.jsx)(e.p,{children:\"Images should always have both height and width tags to allow the browser to calculate the aspect ratio. These should be the native size of the image while allowing CSS to set the actual rendered size. Adding the height and width allows the browser to hold this space open for the image; therefore, the page will not shift when it loads, allowing the measurement to take place more quickly.\"}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.em,{children:\"Example of using the height and width:\"})}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-html\",children:`<img\n    src=\"hero-image.jpg\"\n    height=\\u201D400\\u201D\n    width=\\u201D400\\u201D\n    alt=\"Hero Image.\"\n/>\n`})}),`\n`,(0,t.jsx)(e.h2,{children:\"The srcset and sizes attributes\"}),`\n`,(0,t.jsx)(e.p,{children:\"A more responsive image optimization is to use the srcset and sizes attributes. These attributes allow you to provide different versions of an image for different screen sizes and resolutions and can significantly reduce the amount of data on smaller devices or lower-resolution screens.\"}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.em,{children:\"Example of using the srcset and sizes:\"})}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-html\",children:`<img\n    src=\"hero-image.jpg\"\n    height=\\u201D400\\u201D\n    width=\\u201D400\\u201D\n    srcset=\"\n        hero_400px.jpg 400w,\n        hero_800px.jpg 800w,\n        hero_1600px.jpg 1600w\n    \" \n    sizes=\"(max-width: 600px) 100vw, 50vw\" \n    alt=\"Hero Image.\"\n/>\n`})}),`\n`,(0,t.jsx)(e.h2,{children:\"The loading attribute\"}),`\n`,(0,t.jsx)(e.p,{children:\"The loading attribute can prevent or encourage the browser\\u2019s loading order. The loading attribute can be set to lazy or eager, depending on the use case. \\u201CLazy\\u201D loads the image when it becomes visible in the viewport, while eager loads the image immediately when the page is loaded, whether or not it\\u2019s in the viewport.\"}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.em,{children:\"Example of using the loading attribute:\"})}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-html\",children:`<img\n    src=\"hero-image.jpg\"\n    height=\\u201D400\\u201D\n    width=\\u201D400\\u201D\n    loading=\"eager\"\n    alt=\"Hero Image.\"\n/>\n`})}),`\n`,(0,t.jsx)(e.p,{children:\"You can add the loading attribute with a value of \\u201Clazy\\u201D to other images on your page when they should not load early. Slowing these items down helps speed up the rest of the assets. Lazy images are requested immediately if they are within the viewport. Outside the viewport, they are delayed and only fetched when approaching it.\"}),`\n`,(0,t.jsx)(e.h2,{children:\"The link tag with preload\"}),`\n`,(0,t.jsx)(e.p,{children:\"A link tag with the preload attribute tells the browser about critical resources before encountering them in HTML. So, for example, you can use preload to increase the download priority of late-discovered Hero images, especially if they load via Javascript or CSS.\"}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.em,{children:\"Example of using the link tag:\"})}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-html\",children:`<link rel=\"preload\" as=\"image\" href=\"hero-image.jpg\" />\n`})}),`\n`,(0,t.jsx)(e.p,{children:\"If you are already using the srcset in your hero\\u2019s image tag, you can also use that here in the link tag and ensure that the correct size image is selected.\"}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.em,{children:\"Example of using the link tag with a responsive image:\"})}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-html\",children:`<link\n    rel=\"preload\"\n    as=\"image\"\n    href=\"hero-image.jpg\"\n    imagesrcset=\"\n        hero_400px.jpg 400w,\n        hero_800px.jpg 800w,\n        hero_1600px.jpg 1600w\n    \" \n    imagesizes=\"(max-width: 600px) 100vw, 50vw\"\n/>\n`})}),`\n`,(0,t.jsx)(e.h2,{children:\"The fetchpriority attribute\"}),`\n`,(0,t.jsx)(e.p,{children:\"You can use a fetchpriority attribute to do the same thing as a link preload, although you will have to wait for the processor to discover the image tag. A priority hint can adjust the loading order of assets such as images, CSS, iframes, scripts, and fonts. So the Hero can be requested before other lower-priority assets.\"}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.em,{children:\"Example of using the fetchpriority attribute:\"})}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-html\",children:`<img\n    src=\"hero-image.jpg\"\n    height=\\u201D400\\u201D\n    width=\\u201D400\\u201D\n    fetchpriority=\"high\"\n    alt=\"Hero Image.\"\n/>\n`})}),`\n`,(0,t.jsx)(e.h2,{children:\"Putting it all together\"}),`\n`,(0,t.jsx)(e.p,{children:\"Using all the resources we have learned, we can apply them all to receive an optimal loading path.\"}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.em,{children:\"Example of using all the tools:\"})}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-html\",children:`<head>\n    <link\n        rel=\"preload\"\n        as=\"image\"\n        href=\"hero-image.jpg\"\n        imagesrcset=\"\n            hero_400px.jpg 400w,\n            hero_800px.jpg 800w,\n            hero_1600px.jpg 1600w\n        \" \n        imagesizes=\"(max-width: 600px) 100vw, 50vw\"\n    />\n</head>\n<body>\n    <img\n        src=\"hero-image.jpg\"\n        height=\\u201D400\\u201D\n        width=\\u201D400\\u201D\n        srcset=\"\n            hero_400px.jpg 400w,\n            hero_800px.jpg 800w,\n            hero_1600px.jpg 1600w\n        \" \n        sizes=\"(max-width: 600px) 100vw, 50vw\" \n        alt=\"Hero Image.\"\n        loading=\"eager\"\n        fetchpriority=\"high\"\n    />\n</body>\n\n`})}),`\n`,(0,t.jsx)(e.p,{children:\"Optimizing the hero image is essential in improving the LCP and web page speed. Applying the above techniques can get your site dramatically closer to that 2.5 seconds goal!\"})]})}function x(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(d,n)})):d(n)}var j=x;return v(k);})();\n;return Component;"
    },
    "_id": "posts/hero-image-optimization-techniques.mdx",
    "_raw": {
      "sourceFilePath": "posts/hero-image-optimization-techniques.mdx",
      "sourceFileName": "hero-image-optimization-techniques.mdx",
      "sourceFileDir": "posts",
      "contentType": "mdx",
      "flattenedPath": "posts/hero-image-optimization-techniques"
    },
    "type": "Post",
    "slug": "hero-image-optimization-techniques"
  },
  {
    "title": "How to write a readable commit message.",
    "date": "2020-08-09T00:00:00.000Z",
    "description": "Having a good guideline for creating commits and sticking to it makes working with Git and collaborat...",
    "tags": [
      "git",
      "codequality",
      "beginners"
    ],
    "coverImage": "/images/blog/how-to-write-a-readable-commit-message.jpeg",
    "body": {
      "raw": "\n\nHaving a good guideline for creating commits and sticking to it makes working with Git and collaborating with others a lot easier.\n\n## Subject\n\nThe subject should be around 50 characters or less. You want it to fit in an email subject line.  If you need to explain why you made some decisions or tradeoffs, those comments should be in the code.\n\n* An adequately worded commit should fit grammatically into the sentence below:\n  * If applied, this commit will **[Subject]**\n* Use an [imperative mood](https://en.wikipedia.org/wiki/Imperative_mood). These changes will not be applied right away\n* Capitalize the first letter\n* No punctuation at the end\n* Consider using a [conventional commits](https://www.conventionalcommits.org/) prefix like [karma](https://www.conventionalcommits.org/):\n  * **feat**: a new feature for the user, not a new feature for a build script\n  * **fix**: bug fix for the user, not a fix to a build script\n  * **docs**: changes to the documentation\n  * **style**: formatting, missing semicolons, etc.; no production code change\n  * **refactor**: refactoring production code, e.g., renaming a variable\n  * **test**: adding missing criteria, refactoring tests; no production code change\n  * **chore**: updating grunt tasks etc.; no production code change\n* A scope or section of the codebase can optionally follow the prefix\n\n\nInstead of writing down everything you did, think of each commit as a command. These are instructions to your future self. Git will apply your commits to the codebase, not you, and only once the PR is approved and merged.\n\n```Bash\ngit commit -m \"feat(login): Add a google OAuth endpoint\"\n```\n\n## Body\n\nIf you need to offer more information within your commit (code examples, external references, documentation,  explain complexity), you could do it here. But most times, this information belongs either in the code or the final pull request. Please keep this as short as possible. It is not a blog post. Focus on the following:\n\n* Give the reasons why you made this change\n* Explain the way things worked before this change (and what was wrong with that)\n* Describe why you decided to solve it the way you did\n* Describe how the code works differently now than it did before\n\n```bash\ngit commit -m \"feat(login): Add a google OAuth endpoint\" -m \"This includes the handler, routes, and templates.\"\n```\n\n",
      "code": "var Component=(()=>{var h=Object.create;var r=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,p=Object.prototype.hasOwnProperty;var f=(i,e)=>()=>(e||i((e={exports:{}}).exports,e),e.exports),w=(i,e)=>{for(var t in e)r(i,t,{get:e[t],enumerable:!0})},l=(i,e,t,a)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of m(e))!p.call(i,o)&&o!==t&&r(i,o,{get:()=>e[o],enumerable:!(a=g(e,o))||a.enumerable});return i};var b=(i,e,t)=>(t=i!=null?h(u(i)):{},l(e||!i||!i.__esModule?r(t,\"default\",{value:i,enumerable:!0}):t,i)),y=i=>l(r({},\"__esModule\",{value:!0}),i);var s=f((I,c)=>{c.exports=_jsx_runtime});var j={};w(j,{default:()=>v,frontmatter:()=>x});var n=b(s()),x={title:\"How to write a readable commit message.\",date:\"2020-08-09\",description:\"Having a good guideline for creating commits and sticking to it makes working with Git and collaborat...\",tags:[\"git\",\"codequality\",\"beginners\"],coverImage:\"/images/blog/how-to-write-a-readable-commit-message.jpeg\"};function d(i){let e=Object.assign({p:\"p\",h2:\"h2\",ul:\"ul\",li:\"li\",strong:\"strong\",a:\"a\",pre:\"pre\",code:\"code\"},i.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:\"Having a good guideline for creating commits and sticking to it makes working with Git and collaborating with others a lot easier.\"}),`\n`,(0,n.jsx)(e.h2,{children:\"Subject\"}),`\n`,(0,n.jsx)(e.p,{children:\"The subject should be around 50 characters or less. You want it to fit in an email subject line.  If you need to explain why you made some decisions or tradeoffs, those comments should be in the code.\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"An adequately worded commit should fit grammatically into the sentence below:\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"If applied, this commit will \",(0,n.jsx)(e.strong,{children:\"[Subject]\"})]}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Use an \",(0,n.jsx)(e.a,{href:\"https://en.wikipedia.org/wiki/Imperative_mood\",children:\"imperative mood\"}),\". These changes will not be applied right away\"]}),`\n`,(0,n.jsx)(e.li,{children:\"Capitalize the first letter\"}),`\n`,(0,n.jsx)(e.li,{children:\"No punctuation at the end\"}),`\n`,(0,n.jsxs)(e.li,{children:[\"Consider using a \",(0,n.jsx)(e.a,{href:\"https://www.conventionalcommits.org/\",children:\"conventional commits\"}),\" prefix like \",(0,n.jsx)(e.a,{href:\"https://www.conventionalcommits.org/\",children:\"karma\"}),\":\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"feat\"}),\": a new feature for the user, not a new feature for a build script\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"fix\"}),\": bug fix for the user, not a fix to a build script\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"docs\"}),\": changes to the documentation\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"style\"}),\": formatting, missing semicolons, etc.; no production code change\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"refactor\"}),\": refactoring production code, e.g., renaming a variable\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"test\"}),\": adding missing criteria, refactoring tests; no production code change\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"chore\"}),\": updating grunt tasks etc.; no production code change\"]}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(e.li,{children:\"A scope or section of the codebase can optionally follow the prefix\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"Instead of writing down everything you did, think of each commit as a command. These are instructions to your future self. Git will apply your commits to the codebase, not you, and only once the PR is approved and merged.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-Bash\",children:`git commit -m \"feat(login): Add a google OAuth endpoint\"\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Body\"}),`\n`,(0,n.jsx)(e.p,{children:\"If you need to offer more information within your commit (code examples, external references, documentation,  explain complexity), you could do it here. But most times, this information belongs either in the code or the final pull request. Please keep this as short as possible. It is not a blog post. Focus on the following:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Give the reasons why you made this change\"}),`\n`,(0,n.jsx)(e.li,{children:\"Explain the way things worked before this change (and what was wrong with that)\"}),`\n`,(0,n.jsx)(e.li,{children:\"Describe why you decided to solve it the way you did\"}),`\n`,(0,n.jsx)(e.li,{children:\"Describe how the code works differently now than it did before\"}),`\n`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-bash\",children:`git commit -m \"feat(login): Add a google OAuth endpoint\" -m \"This includes the handler, routes, and templates.\"\n`})})]})}function k(i={}){let{wrapper:e}=i.components||{};return e?(0,n.jsx)(e,Object.assign({},i,{children:(0,n.jsx)(d,i)})):d(i)}var v=k;return y(j);})();\n;return Component;"
    },
    "_id": "posts/how-to-write-a-readable-commit-message.mdx",
    "_raw": {
      "sourceFilePath": "posts/how-to-write-a-readable-commit-message.mdx",
      "sourceFileName": "how-to-write-a-readable-commit-message.mdx",
      "sourceFileDir": "posts",
      "contentType": "mdx",
      "flattenedPath": "posts/how-to-write-a-readable-commit-message"
    },
    "type": "Post",
    "slug": "how-to-write-a-readable-commit-message"
  },
  {
    "title": "Operation Code at The Muse",
    "date": "2020-09-25T00:00:00.000Z",
    "description": "This spring we were honored to connect with Operation Code to host their April Meetup. Operation Code...",
    "tags": [],
    "coverImage": "/images/blog/operation-code-at-the-muse.webp",
    "body": {
      "raw": "\nThis spring we were honored to connect with [Operation Code](https://operationcode.org/) to host their April Meetup. Operation Code is a non-profit organization serving America’s veterans and their families to help them to sort out their next steps after their service - or sometimes, while they’re still serving. Helping people to find their passions and turn them into fulfilling careers is exactly what we do at The Muse, and we were delighted to pitch in. This being Operation Code, Engineering and Product were particularly excited to get involved.\n\nHow do you transition into the civilian workforce as a developer? Senior Application Engineer [Richard Dillman](https://www.linkedin.com/in/richarddillman/) moderated a panel of Musers to explain how to master the technical job search, and how to maintain that success once hired. Director of Talent and Acquisition [Lillian Landrum](https://www.linkedin.com/in/lillianlandrum/) shared how candidates can stand out in the selection process. Manager of Client Project Management [Danielle Incontrera](https://www.linkedin.com/in/danielle-incontrera-diflorio-62ab1445/) discussed how people on the technical side can more effectively communicate with product about goals and timelines. Account Manager [Christina Giordano](https://www.linkedin.com/in/giordanochristina/) explained how engineers help in both sales and client acquisition at The Muse. \nDirector of Engineering [Peenak Inamdar](https://www.linkedin.com/in/peenakinamdar/) fielded questions on what skills developers need to have on his team and how we at The Muse determine if a candidate’s skills meet those needs.\n\nFollowing Peenak’s remarks, Associate Product Manager [James Mayr](https://www.linkedin.com/in/jamesbmayr/) gave a presentation on [Google Tools for Product and Engineering](https://docs.google.com/presentation/d/1IJx9REna-iJaYgezXwxI0pQBtkG79EWVrJZwrRy3_Fk), an overview of how developers can use Google tools such as Optimize, Analytics, Tag Manager, Lighthouse and Google Search Console to monitor site performance, dynamically add or modify content, and develop approaches to increase speed and reliability. We spent quite a bit of time on accessibility and usability too.\n\nAfterwards there was more pizza and more networking amongst all, with the most popular topic being breaking into the developer role as a fresh code camp graduate. Our conversation carried well past our 9PM target with some of us not leaving until well past 10.\n\nMeetups and Operation Code are both great ways to meet people you otherwise might not, learn new skills, and possibly make a connection for a new career.\n\nCheck out the full video of the event:\n\n<div style={{ position: 'relative', paddingBottom: '56.25%', height: 0, overflow: 'hidden', maxWidth: '100%', marginTop: '1rem' }}>\n  <iframe\n    src=\"https://www.youtube.com/embed/zcSWBPCHqk0\"\n    style={{ position: 'absolute', top: 0, left: 0, width: '100%', height: '100%' }}\n    frameBorder=\"0\"\n    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n    allowFullScreen\n  />\n</div>\n\n\n",
      "code": "var Component=(()=>{var h=Object.create;var a=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var w=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var u=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),f=(t,e)=>{for(var i in e)a(t,i,{get:e[i],enumerable:!0})},s=(t,e,i,r)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of m(e))!g.call(t,o)&&o!==i&&a(t,o,{get:()=>e[o],enumerable:!(r=p(e,o))||r.enumerable});return t};var v=(t,e,i)=>(i=t!=null?h(w(t)):{},s(e||!t||!t.__esModule?a(i,\"default\",{value:t,enumerable:!0}):i,t)),y=t=>s(a({},\"__esModule\",{value:!0}),t);var d=u((O,l)=>{l.exports=_jsx_runtime});var x={};f(x,{default:()=>M,frontmatter:()=>b});var n=v(d()),b={title:\"Operation Code at The Muse\",date:\"2020-09-25\",description:\"This spring we were honored to connect with Operation Code to host their April Meetup. Operation Code...\",tags:[],coverImage:\"/images/blog/operation-code-at-the-muse.webp\"};function c(t){let e=Object.assign({p:\"p\",a:\"a\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[\"This spring we were honored to connect with \",(0,n.jsx)(e.a,{href:\"https://operationcode.org/\",children:\"Operation Code\"}),\" to host their April Meetup. Operation Code is a non-profit organization serving America\\u2019s veterans and their families to help them to sort out their next steps after their service - or sometimes, while they\\u2019re still serving. Helping people to find their passions and turn them into fulfilling careers is exactly what we do at The Muse, and we were delighted to pitch in. This being Operation Code, Engineering and Product were particularly excited to get involved.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"How do you transition into the civilian workforce as a developer? Senior Application Engineer \",(0,n.jsx)(e.a,{href:\"https://www.linkedin.com/in/richarddillman/\",children:\"Richard Dillman\"}),\" moderated a panel of Musers to explain how to master the technical job search, and how to maintain that success once hired. Director of Talent and Acquisition \",(0,n.jsx)(e.a,{href:\"https://www.linkedin.com/in/lillianlandrum/\",children:\"Lillian Landrum\"}),\" shared how candidates can stand out in the selection process. Manager of Client Project Management \",(0,n.jsx)(e.a,{href:\"https://www.linkedin.com/in/danielle-incontrera-diflorio-62ab1445/\",children:\"Danielle Incontrera\"}),\" discussed how people on the technical side can more effectively communicate with product about goals and timelines. Account Manager \",(0,n.jsx)(e.a,{href:\"https://www.linkedin.com/in/giordanochristina/\",children:\"Christina Giordano\"}),` explained how engineers help in both sales and client acquisition at The Muse.\nDirector of Engineering `,(0,n.jsx)(e.a,{href:\"https://www.linkedin.com/in/peenakinamdar/\",children:\"Peenak Inamdar\"}),\" fielded questions on what skills developers need to have on his team and how we at The Muse determine if a candidate\\u2019s skills meet those needs.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Following Peenak\\u2019s remarks, Associate Product Manager \",(0,n.jsx)(e.a,{href:\"https://www.linkedin.com/in/jamesbmayr/\",children:\"James Mayr\"}),\" gave a presentation on \",(0,n.jsx)(e.a,{href:\"https://docs.google.com/presentation/d/1IJx9REna-iJaYgezXwxI0pQBtkG79EWVrJZwrRy3_Fk\",children:\"Google Tools for Product and Engineering\"}),\", an overview of how developers can use Google tools such as Optimize, Analytics, Tag Manager, Lighthouse and Google Search Console to monitor site performance, dynamically add or modify content, and develop approaches to increase speed and reliability. We spent quite a bit of time on accessibility and usability too.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Afterwards there was more pizza and more networking amongst all, with the most popular topic being breaking into the developer role as a fresh code camp graduate. Our conversation carried well past our 9PM target with some of us not leaving until well past 10.\"}),`\n`,(0,n.jsx)(e.p,{children:\"Meetups and Operation Code are both great ways to meet people you otherwise might not, learn new skills, and possibly make a connection for a new career.\"}),`\n`,(0,n.jsx)(e.p,{children:\"Check out the full video of the event:\"}),`\n`,(0,n.jsx)(\"div\",{style:{position:\"relative\",paddingBottom:\"56.25%\",height:0,overflow:\"hidden\",maxWidth:\"100%\",marginTop:\"1rem\"},children:(0,n.jsx)(\"iframe\",{src:\"https://www.youtube.com/embed/zcSWBPCHqk0\",style:{position:\"absolute\",top:0,left:0,width:\"100%\",height:\"100%\"},frameBorder:\"0\",allow:\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\",allowFullScreen:!0})})]})}function k(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(c,t)})):c(t)}var M=k;return y(x);})();\n;return Component;"
    },
    "_id": "posts/operation-code-at-the-muse.mdx",
    "_raw": {
      "sourceFilePath": "posts/operation-code-at-the-muse.mdx",
      "sourceFileName": "operation-code-at-the-muse.mdx",
      "sourceFileDir": "posts",
      "contentType": "mdx",
      "flattenedPath": "posts/operation-code-at-the-muse"
    },
    "type": "Post",
    "slug": "operation-code-at-the-muse"
  },
  {
    "title": "Why Your React Component Is a Hot Mess (and How to Fix It)",
    "date": "2025-06-25T00:00:00.000Z",
    "description": "Writing React components is kind of like doing laundry. Sure, you could toss everything in together...",
    "tags": [
      "react",
      "programming",
      "webdev",
      "javascript"
    ],
    "coverImage": "/images/blog/why-your-react-component-is-a-hot-mess.jpeg",
    "body": {
      "raw": "\nWriting React components is kind of like doing laundry. Sure, you could toss everything in together and hope for the best… but you'll probably end up with pink socks and runtime errors. A clean, consistent order inside your functional components helps your code stay readable, maintainable, and most importantly, not broken.\n\nReact’s [Rules of Hooks](https://reactjs.org/docs/hooks-rules.html) are like those “do not put metal in the microwave” warnings. They exist because someone did put `useEffect` inside a `for` loop, and things caught fire.\n\nLet’s walk through a solid, time-tested order for organizing logic inside a functional component. You won’t always need every section, but knowing the ideal flow can save you from future debugging-induced hair loss.\n\n## Why Hook Order Matters\n\nReact tracks hooks by position, not by name. Think of it like calling roll in class, if someone swaps seats, the teacher starts marking the wrong student absent.\n\nIf your hook order changes between renders (say, putting a hook inside an `if` statement), React gets confused. Confused React is not fun React. You’ll likely see this cryptic gem:\n\n```vbnet\nReact has encountered a hook call that is inconsistent with previous renders.\n```\n\n## 1 Hooks - Built-in (useState, useEffect, etc.)\n**Why they go first:**\n\nReact’s built-in hooks need to run in the exact same order every time. No surprises, no detours, no mystery meat. Putting them right at the top ensures everything is predictable and in line with React’s rules.\n\n```jsx\nfunction ExampleComponent() {\n  const [count, setCount] = useState(0);\n  const [name, setName] = useState(\"Guest\");\n}\n```\n\nThink of this section as the “meet the characters” part of a movie. Everyone’s introduced early, so the plot (i.e., the render) makes sense.\n\n## 2 Custom Hooks\n**Why they’re next:**\n\nCustom hooks are like those helpful friends who show up with a toolbox and a pot of coffee. They usually rely on built-in hooks, so we want the foundation laid before they come in and start tightening bolts.\n\n```jsx\nconst user = useUser();\nconst theme = useTheme();\n```\n\nStacking them under the built-ins gives you a nice clean \"hooks zone\" where all the magic starts.\n\n## 3 Derived Data (from props or state)\n**Why it goes here:**\n\nOnce you’ve got your raw ingredients (props, destructured props, and state), it’s time to prep them. Derived variables are like chopping onions, not exciting, but necessary before you start cooking the actual dish.\n\n```jsx\nconst { user } = props;\nconst isLoggedIn = Boolean(user);\nconst displayName = user?.name?.trim() ?? \"Anonymous\";\n```\n\nPut these right after hooks so you’re always working with declared and up-to-date values.\n\n## 4 Callbacks (useCallback, useMemo, useRef, etc.)\n**What now:**\n\nCallbacks and memoized values depend on state or props, and you want them nicely memoized before you start rendering or passing them down. Think of this as labeling your leftovers before you put them in the fridge.\n\nNote: If it can be easily done, move these outside the component, but if they rely on the hooks or modify them, don't.\n\n```jsx\nconst handleClick = useCallback(() => {\n  setCount((prev) => prev + 1);\n}, []);\n```\n\nKeeps things neat. Prevents unnecessary re-renders. Your future self will thank you.\n\n## 5 Effects (useEffect, useLayoutEffect, etc.)\n**Why are they down here:**\n\nEffects are the \"cleanup crew\" running after shadow dom has been generated the browser. Effects are hooks so order still matters. Even if you wind up not needing a hook it is still counted. They need to be after other types of hooks, or data, but before any conditional logic.\n\n```jsx\nuseEffect(() => {\n  console.log(\"Component mounted or count changed\");\n}, [count]);\n```\n\n## 6 Conditional Logic (Conditionals, loops, fragments, etc.)\n**Why it's here:**\n\nBefore React can draw the UI, you might need to make decisions, like whether to show a login prompt or a dashboard. This is where that logic lives.\n\n**Critical rule:**\nNever put conditionals above your hooks. That’s how you get runtime gremlins.\n\n```jsx\nif (!isLoggedIn) {\n  return <LoginPrompt />;\n}\n\nconst items = [1, 2, 3].map((item) => (\n  <li key={item}>{item}</li>\n));\n```\n\nThis section is your last prep before serving the dish.\n\n## 7 Return JSX\n**Why is this last:**\n\nIt’s the final product! The visual output. The “ta-da!” moment. This is what the user sees, and it should be the last thing, after all your setup work.\n\n```jsx\nreturn (\n  <div>\n    <h1>Hello, {displayName}!</h1>\n    <button onClick={handleClick}>Click me ({count})</button>\n    <ul>{items}</ul>\n  </div>\n);\n```\n\n## Final Thoughts\n\nReact won’t force you to follow this order, but following a logical structure helps future-you (or your teammates) understand what’s happening and reduces the chance of hook-related surprises.\n\nWant to enforce it automatically? Tools like ESLint (with [eslint-plugin-react-hooks](https://github.com/facebook/react/tree/main/packages/eslint-plugin-react-hooks)) and Prettier can keep your components nice and tidy.\n\nWorking with an LLM like Claude or ChatGPT? Add this structure to its [coding style guide](https://www.anthropic.com/engineering/claude-code-best-practices#1-customize-your-setup) so your AI pair-programmer doesn’t throw spaghetti at your component tree.\n\n> Bonus dad joke: What do you call a TV vaccination?\n> A screenshot.\n\n",
      "code": "var Component=(()=>{var d=Object.create;var s=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,m=Object.prototype.hasOwnProperty;var y=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),f=(t,e)=>{for(var o in e)s(t,o,{get:e[o],enumerable:!0})},a=(t,e,o,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of p(e))!m.call(t,r)&&r!==o&&s(t,r,{get:()=>e[r],enumerable:!(i=u(e,r))||i.enumerable});return t};var k=(t,e,o)=>(o=t!=null?d(g(t)):{},a(e||!t||!t.__esModule?s(o,\"default\",{value:t,enumerable:!0}):o,t)),b=t=>a(s({},\"__esModule\",{value:!0}),t);var h=y((T,c)=>{c.exports=_jsx_runtime});var C={};f(C,{default:()=>x,frontmatter:()=>w});var n=k(h()),w={title:\"Why Your React Component Is a Hot Mess (and How to Fix It)\",date:\"2025-06-25\",description:\"Writing React components is kind of like doing laundry. Sure, you could toss everything in together...\",tags:[\"react\",\"programming\",\"webdev\",\"javascript\"],coverImage:\"/images/blog/why-your-react-component-is-a-hot-mess.jpeg\"};function l(t){let e=Object.assign({p:\"p\",a:\"a\",code:\"code\",h2:\"h2\",pre:\"pre\",strong:\"strong\",blockquote:\"blockquote\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:\"Writing React components is kind of like doing laundry. Sure, you could toss everything in together and hope for the best\\u2026 but you'll probably end up with pink socks and runtime errors. A clean, consistent order inside your functional components helps your code stay readable, maintainable, and most importantly, not broken.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"React\\u2019s \",(0,n.jsx)(e.a,{href:\"https://reactjs.org/docs/hooks-rules.html\",children:\"Rules of Hooks\"}),\" are like those \\u201Cdo not put metal in the microwave\\u201D warnings. They exist because someone did put \",(0,n.jsx)(e.code,{children:\"useEffect\"}),\" inside a \",(0,n.jsx)(e.code,{children:\"for\"}),\" loop, and things caught fire.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Let\\u2019s walk through a solid, time-tested order for organizing logic inside a functional component. You won\\u2019t always need every section, but knowing the ideal flow can save you from future debugging-induced hair loss.\"}),`\n`,(0,n.jsx)(e.h2,{children:\"Why Hook Order Matters\"}),`\n`,(0,n.jsx)(e.p,{children:\"React tracks hooks by position, not by name. Think of it like calling roll in class, if someone swaps seats, the teacher starts marking the wrong student absent.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"If your hook order changes between renders (say, putting a hook inside an \",(0,n.jsx)(e.code,{children:\"if\"}),\" statement), React gets confused. Confused React is not fun React. You\\u2019ll likely see this cryptic gem:\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-vbnet\",children:`React has encountered a hook call that is inconsistent with previous renders.\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"1 Hooks - Built-in (useState, useEffect, etc.)\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.strong,{children:\"Why they go first:\"})}),`\n`,(0,n.jsx)(e.p,{children:\"React\\u2019s built-in hooks need to run in the exact same order every time. No surprises, no detours, no mystery meat. Putting them right at the top ensures everything is predictable and in line with React\\u2019s rules.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`function ExampleComponent() {\n  const [count, setCount] = useState(0);\n  const [name, setName] = useState(\"Guest\");\n}\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"Think of this section as the \\u201Cmeet the characters\\u201D part of a movie. Everyone\\u2019s introduced early, so the plot (i.e., the render) makes sense.\"}),`\n`,(0,n.jsx)(e.h2,{children:\"2 Custom Hooks\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.strong,{children:\"Why they\\u2019re next:\"})}),`\n`,(0,n.jsx)(e.p,{children:\"Custom hooks are like those helpful friends who show up with a toolbox and a pot of coffee. They usually rely on built-in hooks, so we want the foundation laid before they come in and start tightening bolts.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`const user = useUser();\nconst theme = useTheme();\n`})}),`\n`,(0,n.jsx)(e.p,{children:'Stacking them under the built-ins gives you a nice clean \"hooks zone\" where all the magic starts.'}),`\n`,(0,n.jsx)(e.h2,{children:\"3 Derived Data (from props or state)\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.strong,{children:\"Why it goes here:\"})}),`\n`,(0,n.jsx)(e.p,{children:\"Once you\\u2019ve got your raw ingredients (props, destructured props, and state), it\\u2019s time to prep them. Derived variables are like chopping onions, not exciting, but necessary before you start cooking the actual dish.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`const { user } = props;\nconst isLoggedIn = Boolean(user);\nconst displayName = user?.name?.trim() ?? \"Anonymous\";\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"Put these right after hooks so you\\u2019re always working with declared and up-to-date values.\"}),`\n`,(0,n.jsx)(e.h2,{children:\"4 Callbacks (useCallback, useMemo, useRef, etc.)\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.strong,{children:\"What now:\"})}),`\n`,(0,n.jsx)(e.p,{children:\"Callbacks and memoized values depend on state or props, and you want them nicely memoized before you start rendering or passing them down. Think of this as labeling your leftovers before you put them in the fridge.\"}),`\n`,(0,n.jsx)(e.p,{children:\"Note: If it can be easily done, move these outside the component, but if they rely on the hooks or modify them, don't.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`const handleClick = useCallback(() => {\n  setCount((prev) => prev + 1);\n}, []);\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"Keeps things neat. Prevents unnecessary re-renders. Your future self will thank you.\"}),`\n`,(0,n.jsx)(e.h2,{children:\"5 Effects (useEffect, useLayoutEffect, etc.)\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.strong,{children:\"Why are they down here:\"})}),`\n`,(0,n.jsx)(e.p,{children:'Effects are the \"cleanup crew\" running after shadow dom has been generated the browser. Effects are hooks so order still matters. Even if you wind up not needing a hook it is still counted. They need to be after other types of hooks, or data, but before any conditional logic.'}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`useEffect(() => {\n  console.log(\"Component mounted or count changed\");\n}, [count]);\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"6 Conditional Logic (Conditionals, loops, fragments, etc.)\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.strong,{children:\"Why it's here:\"})}),`\n`,(0,n.jsx)(e.p,{children:\"Before React can draw the UI, you might need to make decisions, like whether to show a login prompt or a dashboard. This is where that logic lives.\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Critical rule:\"}),`\nNever put conditionals above your hooks. That\\u2019s how you get runtime gremlins.`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`if (!isLoggedIn) {\n  return <LoginPrompt />;\n}\n\nconst items = [1, 2, 3].map((item) => (\n  <li key={item}>{item}</li>\n));\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"This section is your last prep before serving the dish.\"}),`\n`,(0,n.jsx)(e.h2,{children:\"7 Return JSX\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.strong,{children:\"Why is this last:\"})}),`\n`,(0,n.jsx)(e.p,{children:\"It\\u2019s the final product! The visual output. The \\u201Cta-da!\\u201D moment. This is what the user sees, and it should be the last thing, after all your setup work.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`return (\n  <div>\n    <h1>Hello, {displayName}!</h1>\n    <button onClick={handleClick}>Click me ({count})</button>\n    <ul>{items}</ul>\n  </div>\n);\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Final Thoughts\"}),`\n`,(0,n.jsx)(e.p,{children:\"React won\\u2019t force you to follow this order, but following a logical structure helps future-you (or your teammates) understand what\\u2019s happening and reduces the chance of hook-related surprises.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Want to enforce it automatically? Tools like ESLint (with \",(0,n.jsx)(e.a,{href:\"https://github.com/facebook/react/tree/main/packages/eslint-plugin-react-hooks\",children:\"eslint-plugin-react-hooks\"}),\") and Prettier can keep your components nice and tidy.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Working with an LLM like Claude or ChatGPT? Add this structure to its \",(0,n.jsx)(e.a,{href:\"https://www.anthropic.com/engineering/claude-code-best-practices#1-customize-your-setup\",children:\"coding style guide\"}),\" so your AI pair-programmer doesn\\u2019t throw spaghetti at your component tree.\"]}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsx)(e.p,{children:`Bonus dad joke: What do you call a TV vaccination?\nA screenshot.`}),`\n`]})]})}function v(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(l,t)})):l(t)}var x=v;return b(C);})();\n;return Component;"
    },
    "_id": "posts/why-your-react-component-is-a-hot-mess.mdx",
    "_raw": {
      "sourceFilePath": "posts/why-your-react-component-is-a-hot-mess.mdx",
      "sourceFileName": "why-your-react-component-is-a-hot-mess.mdx",
      "sourceFileDir": "posts",
      "contentType": "mdx",
      "flattenedPath": "posts/why-your-react-component-is-a-hot-mess"
    },
    "type": "Post",
    "slug": "why-your-react-component-is-a-hot-mess"
  }
]