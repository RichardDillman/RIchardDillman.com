{
  "title": "How to write a readable commit message.",
  "date": "2020-08-09T00:00:00.000Z",
  "description": "Having a good guideline for creating commits and sticking to it makes working with Git and collaborat...",
  "tags": [
    "git",
    "codequality",
    "beginners"
  ],
  "coverImage": "/images/blog/how-to-write-a-readable-commit-message.jpeg",
  "body": {
    "raw": "\n\nHaving a good guideline for creating commits and sticking to it makes working with Git and collaborating with others a lot easier.\n\n## Subject\n\nThe subject should be around 50 characters or less. You want it to fit in an email subject line.  If you need to explain why you made some decisions or tradeoffs, those comments should be in the code.\n\n* An adequately worded commit should fit grammatically into the sentence below:\n  * If applied, this commit will **[Subject]**\n* Use an [imperative mood](https://en.wikipedia.org/wiki/Imperative_mood). These changes will not be applied right away\n* Capitalize the first letter\n* No punctuation at the end\n* Consider using a [conventional commits](https://www.conventionalcommits.org/) prefix like [karma](https://www.conventionalcommits.org/):\n  * **feat**: a new feature for the user, not a new feature for a build script\n  * **fix**: bug fix for the user, not a fix to a build script\n  * **docs**: changes to the documentation\n  * **style**: formatting, missing semicolons, etc.; no production code change\n  * **refactor**: refactoring production code, e.g., renaming a variable\n  * **test**: adding missing criteria, refactoring tests; no production code change\n  * **chore**: updating grunt tasks etc.; no production code change\n* A scope or section of the codebase can optionally follow the prefix\n\n\nInstead of writing down everything you did, think of each commit as a command. These are instructions to your future self. Git will apply your commits to the codebase, not you, and only once the PR is approved and merged.\n\n```Bash\ngit commit -m \"feat(login): Add a google OAuth endpoint\"\n```\n\n## Body\n\nIf you need to offer more information within your commit (code examples, external references, documentation,  explain complexity), you could do it here. But most times, this information belongs either in the code or the final pull request. Please keep this as short as possible. It is not a blog post. Focus on the following:\n\n* Give the reasons why you made this change\n* Explain the way things worked before this change (and what was wrong with that)\n* Describe why you decided to solve it the way you did\n* Describe how the code works differently now than it did before\n\n```bash\ngit commit -m \"feat(login): Add a google OAuth endpoint\" -m \"This includes the handler, routes, and templates.\"\n```\n\n",
    "code": "var Component=(()=>{var h=Object.create;var r=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,p=Object.prototype.hasOwnProperty;var f=(i,e)=>()=>(e||i((e={exports:{}}).exports,e),e.exports),w=(i,e)=>{for(var t in e)r(i,t,{get:e[t],enumerable:!0})},l=(i,e,t,a)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of m(e))!p.call(i,o)&&o!==t&&r(i,o,{get:()=>e[o],enumerable:!(a=g(e,o))||a.enumerable});return i};var b=(i,e,t)=>(t=i!=null?h(u(i)):{},l(e||!i||!i.__esModule?r(t,\"default\",{value:i,enumerable:!0}):t,i)),y=i=>l(r({},\"__esModule\",{value:!0}),i);var s=f((I,c)=>{c.exports=_jsx_runtime});var j={};w(j,{default:()=>v,frontmatter:()=>x});var n=b(s()),x={title:\"How to write a readable commit message.\",date:\"2020-08-09\",description:\"Having a good guideline for creating commits and sticking to it makes working with Git and collaborat...\",tags:[\"git\",\"codequality\",\"beginners\"],coverImage:\"/images/blog/how-to-write-a-readable-commit-message.jpeg\"};function d(i){let e=Object.assign({p:\"p\",h2:\"h2\",ul:\"ul\",li:\"li\",strong:\"strong\",a:\"a\",pre:\"pre\",code:\"code\"},i.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:\"Having a good guideline for creating commits and sticking to it makes working with Git and collaborating with others a lot easier.\"}),`\n`,(0,n.jsx)(e.h2,{children:\"Subject\"}),`\n`,(0,n.jsx)(e.p,{children:\"The subject should be around 50 characters or less. You want it to fit in an email subject line.  If you need to explain why you made some decisions or tradeoffs, those comments should be in the code.\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"An adequately worded commit should fit grammatically into the sentence below:\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"If applied, this commit will \",(0,n.jsx)(e.strong,{children:\"[Subject]\"})]}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Use an \",(0,n.jsx)(e.a,{href:\"https://en.wikipedia.org/wiki/Imperative_mood\",children:\"imperative mood\"}),\". These changes will not be applied right away\"]}),`\n`,(0,n.jsx)(e.li,{children:\"Capitalize the first letter\"}),`\n`,(0,n.jsx)(e.li,{children:\"No punctuation at the end\"}),`\n`,(0,n.jsxs)(e.li,{children:[\"Consider using a \",(0,n.jsx)(e.a,{href:\"https://www.conventionalcommits.org/\",children:\"conventional commits\"}),\" prefix like \",(0,n.jsx)(e.a,{href:\"https://www.conventionalcommits.org/\",children:\"karma\"}),\":\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"feat\"}),\": a new feature for the user, not a new feature for a build script\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"fix\"}),\": bug fix for the user, not a fix to a build script\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"docs\"}),\": changes to the documentation\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"style\"}),\": formatting, missing semicolons, etc.; no production code change\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"refactor\"}),\": refactoring production code, e.g., renaming a variable\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"test\"}),\": adding missing criteria, refactoring tests; no production code change\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"chore\"}),\": updating grunt tasks etc.; no production code change\"]}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(e.li,{children:\"A scope or section of the codebase can optionally follow the prefix\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"Instead of writing down everything you did, think of each commit as a command. These are instructions to your future self. Git will apply your commits to the codebase, not you, and only once the PR is approved and merged.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-Bash\",children:`git commit -m \"feat(login): Add a google OAuth endpoint\"\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Body\"}),`\n`,(0,n.jsx)(e.p,{children:\"If you need to offer more information within your commit (code examples, external references, documentation,  explain complexity), you could do it here. But most times, this information belongs either in the code or the final pull request. Please keep this as short as possible. It is not a blog post. Focus on the following:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Give the reasons why you made this change\"}),`\n`,(0,n.jsx)(e.li,{children:\"Explain the way things worked before this change (and what was wrong with that)\"}),`\n`,(0,n.jsx)(e.li,{children:\"Describe why you decided to solve it the way you did\"}),`\n`,(0,n.jsx)(e.li,{children:\"Describe how the code works differently now than it did before\"}),`\n`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-bash\",children:`git commit -m \"feat(login): Add a google OAuth endpoint\" -m \"This includes the handler, routes, and templates.\"\n`})})]})}function k(i={}){let{wrapper:e}=i.components||{};return e?(0,n.jsx)(e,Object.assign({},i,{children:(0,n.jsx)(d,i)})):d(i)}var v=k;return y(j);})();\n;return Component;"
  },
  "_id": "posts/how-to-write-a-readable-commit-message.mdx",
  "_raw": {
    "sourceFilePath": "posts/how-to-write-a-readable-commit-message.mdx",
    "sourceFileName": "how-to-write-a-readable-commit-message.mdx",
    "sourceFileDir": "posts",
    "contentType": "mdx",
    "flattenedPath": "posts/how-to-write-a-readable-commit-message"
  },
  "type": "Post",
  "slug": "how-to-write-a-readable-commit-message"
}