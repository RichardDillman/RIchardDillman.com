name: Lighthouse CI

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

permissions:
  contents: write  # Required to commit Lighthouse reports back to repo
  pull-requests: write
  issues: write

jobs:
  lighthouse:
    name: Lighthouse Performance & Web Vitals
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run Lighthouse CI
        run: pnpm run test:lhci
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
          # Run 3x on merge to main, 1x on PRs for fast feedback
          CI_MERGE_TO_MAIN: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
          GITHUB_REF: ${{ github.ref }}

      # On main branch: manually stage report files before commit
      - name: Stage Lighthouse reports
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          echo "=== Files in lighthouse-reports/ before staging ==="
          ls -lah lighthouse-reports/
          echo ""
          echo "=== Git status before staging ==="
          git status
          echo ""
          echo "=== Adding files to git ==="
          git add -A lighthouse-reports/
          echo ""
          echo "=== Git status after staging ==="
          git status

      # On main branch: commit reports for regression tracking
      - name: Commit Lighthouse reports
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: 'chore: update Lighthouse performance reports [skip ci]'
          file_pattern: 'lighthouse-reports/**/*'
          commit_user_name: 'github-actions[bot]'
          commit_user_email: 'github-actions[bot]@users.noreply.github.com'
          skip_dirty_check: true  # We already staged files manually
          skip_fetch: false
          skip_checkout: false

      # Note: On PRs, results are uploaded to temporary-public-storage automatically
      # and visible in the GitHub Actions logs with shareable URLs (7-day retention)

  # Optional: Check Vercel build time
  vercel-build-check:
    name: Vercel Build Time Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build and time
        id: build
        run: |
          START_TIME=$(date +%s)
          pnpm run build
          END_TIME=$(date +%s)
          BUILD_TIME=$((END_TIME - START_TIME))
          echo "Build completed in ${BUILD_TIME}s"
          echo "build_time=${BUILD_TIME}" >> $GITHUB_OUTPUT

          # Fail if build takes longer than 60s
          if [ $BUILD_TIME -gt 60 ]; then
            echo "::error::Build time exceeded 60s target (took ${BUILD_TIME}s)"
            exit 1
          fi

      - name: Comment on PR
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const buildTime = '${{ steps.build.outputs.build_time }}';
            const status = buildTime > 60 ? '❌' : '✅';
            const comment = `## Build Time Check ${status}\n\nBuild completed in **${buildTime}s** (target: <60s)`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
